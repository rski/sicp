(define (square a)
  (* a a))


(define (exhaustive-f-test number)
  (define (exhaustive-f-test-inner a number)
    (cond ((>= a number) #t)
          ((f-test a number) (f-test (+ 1 a) number))
          (else #f)))
  (exhaustive-f-test-inner 2 number))

(define (f-test a number)
  (not (= (mr-exp-mod a (- number 1) number) 0)))

(define (non-trivial-root-test num m)
  ;;(display ">")
  ;;(display num)
  ;;(display "<\n")
  (if (and
       (= (remainder (square num)  m) 1)
       (not (= num 1))
       (not (= num (- m 1)))) 0
       (remainder (square num) m)))

(define (mr-exp-mod a exp m)
  ;; (display a)
  ;; (display "|")
  ;; (display exp)
  ;; (display "\n")
  (cond ((= exp 0) 1)
        ((even? exp)
         (non-trivial-root-test (mr-exp-mod a (/ exp 2) m) m))
        (else (remainder (* a (mr-exp-mod a (- exp 1) m)) m))))

(display (exhaustive-f-test 561))
(display "\n")
(display (exhaustive-f-test 1105))
(display "\n")
(display (exhaustive-f-test 1729))
(display "\n")
(display (exhaustive-f-test 2465))
(display "\n")
(display (exhaustive-f-test 2821))
(display "\n")
(display (exhaustive-f-test 6601))
(display "\n\n")
(display "should be true")
(display "\n\n")
;;(display (f-test 2 11))
(display (exhaustive-f-test 11))
(display (exhaustive-f-test 13))
(display (exhaustive-f-test 2))
(display (exhaustive-f-test 1))
